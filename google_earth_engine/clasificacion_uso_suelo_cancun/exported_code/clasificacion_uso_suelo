/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var city1 = /* color: #ffff99 */ee.Geometry.Polygon(
        [[[-86.8581, 21.18],
          [-86.8581, 21.1985],
          [-86.8268, 21.1985],
          [-86.8268, 21.18]]]),
    city2 = /* color: #99ffff */ee.Geometry.Polygon(
        [[[-86.8262, 21.1598],
          [-86.8262, 21.1792],
          [-86.87665278320313, 21.170236003649176],
          [-86.87596613769531, 21.156598215321342],
          [-86.87133911132814, 21.14763363044222]]]),
    forest1 = /* color: #d63000 */ee.Geometry.Polygon(
        [[[-86.9235, 21.1914],
          [-86.9235, 21.2218],
          [-86.9606, 21.2218],
          [-86.97845376006575, 21.202115578016446],
          [-86.96883974609374, 21.15170145285238]]]),
    forest2 = /* color: #ff99ff */ee.Geometry.Polygon(
        [[[-86.93592782461126, 20.997757843488056],
          [-86.90914868200018, 21.03332144790041],
          [-86.94189250333254, 21.024351386764792],
          [-86.9670837520327, 21.058314278790082],
          [-86.971890302781, 20.997757843488056]]]),
    sea1 = /* color: #98ff00 */ee.Geometry.Polygon(
        [[[-86.74606202683674, 20.996265644369274],
          [-86.70520921093029, 20.997997955693016],
          [-86.70829656164669, 21.036906617331407],
          [-86.80470461414308, 21.022165646153233],
          [-86.80470465369096, 20.996265646153265],
          [-86.77195346861633, 20.998189427523567]]]),
    sea2 = /* color: #0b4a8b */ee.Geometry.Polygon(
        [[[-86.7082, 21.1734],
          [-86.7082, 21.199],
          [-86.7716931640625, 21.215643749468004],
          [-86.7912631502959, 21.1865194415171],
          [-86.77581303710937, 21.15931292388709],
          [-86.73925993652344, 21.152911736432173]]]),
    lagoon1 = /* color: #ffc82d */ee.Geometry.Polygon(
        [[[-86.771, 21.113],
          [-86.77614984130858, 21.13027513723123],
          [-86.78672328171632, 21.130916075143126],
          [-86.81034364013671, 21.14548570086102],
          [-86.7915463365007, 21.12587620549912],
          [-86.78751267700194, 21.122437976126747],
          [-86.78905762939452, 21.111718889966767]]]),
    lagoon2 = /* color: #00ffff */ee.Geometry.Polygon(
        [[[-86.7784, 21.0801],
          [-86.7784, 21.1064],
          [-86.79426051369609, 21.104718972644108],
          [-86.80737555541992, 21.117769872554256],
          [-86.80960704071583, 21.103588289114786],
          [-86.80428565063477, 21.09613284064104],
          [-86.80411398925781, 21.087147468767174]]]),
    cancun_geometry = 
    /* color: #0b4a8b */
    /* shown: false */
    ee.Geometry.Polygon(
        [[[-86.9888928724973, 21.238330006870573],
          [-86.9888928724973, 20.984669019255062],
          [-86.68539555804418, 20.984669019255062],
          [-86.68539555804418, 21.238330006870573]]]);
/***** End of imports. If edited, may not auto-convert in the playground. *****/
var exported = require('users/fernandogp/practica2_sig:exports');

// Centro del mapa.
Map.setCenter(-86.84, 21.11, 11);

// Obtención de la imagen de Cancún calculando la mediana entre todas las imágenes del 2019.
var cancun_image = ee.ImageCollection("LANDSAT/LC08/C01/T1_SR")
                      .filter(ee.Filter.eq('WRS_PATH', 18))
                      .filter(ee.Filter.eq('WRS_ROW', 45))
                      .filterDate('2019-01-01', '2019-12-31')
                      .map(exported.maskL8sr)
                      .median()
                      .clip(cancun_geometry);
                      
// Parámetros visuales para la imagen de Cancún.
var visParams = {
  bands: ['B4', 'B3', 'B2'],
  min: 0,
  max: 3000,
  gamma: 1.4
};

// Imagen original
Map.addLayer(cancun_image, visParams, 'Original');

// Bandas a usar para la clasificación.
var bands = ['B2', 'B3', 'B4', 'B5', 'B6', 'B7', 'B10', 'B11'];

// Creación de un FeatureCollection con los polígonos de las clases.
var polygons = ee.FeatureCollection([
  ee.Feature(city1, {'class': 0}),
  ee.Feature(city2, {'class': 0}),
  ee.Feature(forest1, {'class': 1}),
  ee.Feature(forest2, {'class': 1}),
  ee.Feature(sea1, {'class': 2}),
  ee.Feature(sea2, {'class': 2}),
  ee.Feature(lagoon1, {'class': 3}),
  ee.Feature(lagoon2, {'class': 3}),
]);

// Obtención de los valores de todos los pixeles de cada polígono en el conjunto de entrenamiento.
var training = cancun_image.sampleRegions({
  // Las muestras se calculan usando el FeatureCollection creado con los polígonos de las clases.
  collection: polygons,
  // La clase a la que pertenece cada polígono se almacena en una lista.
  properties: ['class'],
  // La escala a usar para obtener de la imagen de Landsat los pixeles en los polígonos.
  scale: 30
});

// Clasificadores a usar //

// Clasificador CART (Classification and Regression Trees).
var smileCart = ee.Classifier.smileCart()
    .train({
      features: training,
      classProperty: 'class',
      inputProperties: bands
    });

var classified_smileCart = cancun_image.classify(smileCart);

// Clasificador Naive Bayes.
var smileNaiveBayes = ee.Classifier.smileNaiveBayes()
    .train({
      features: training,
      classProperty: 'class',
      inputProperties: bands
    });

var classified_smileNaiveBayes = cancun_image.classify(smileNaiveBayes);

// Clasificador Random Forest.
var smileRandomForest = ee.Classifier.smileRandomForest(10)
    .train({
      features: training,
      classProperty: 'class',
      inputProperties: bands
    });
    
var classified_smileRandomForest = cancun_image.classify(smileRandomForest);

// Clasificador SVM (Support Vector Machines).
var libsvm = ee.Classifier.libsvm()
    .train({
      features: training,
      classProperty: 'class',
      inputProperties: bands
    });
    
var classified_libsvm = cancun_image.classify(libsvm);

// Parámetros visuales para los resultados de cada clasificador.
var visClass = {
  min: 0,
  max: 3,
  palette: ['yellow', 'green', 'blue', 'red']
};

// Resultados de los algoritmos de clasificación.
Map.addLayer(classified_smileCart, visClass, 'CART');
Map.addLayer(classified_smileNaiveBayes, visClass, 'Naive Bayes');
Map.addLayer(classified_smileRandomForest, visClass, 'Random Forest');
Map.addLayer(classified_libsvm, visClass, 'SVM');

// Exportar los resultados a Drive.
Export.image.toDrive({
  image: cancun_image,
  description: "cancun_original",
  folder: "Clasificación de Uso de Suelo - Cancún",
  region: cancun_geometry,
  scale: 30
});

Export.table.toDrive({
  collection: polygons,
  description: "poligonos_clases",
  folder: "Clasificación de Uso de Suelo - Cancún",
  fileFormat: "GeoJSON"
});

Export.image.toDrive({
  image: classified_smileCart,
  description: "clasificacion_smileCart",
  folder: "Clasificación de Uso de Suelo - Cancún",
  region: cancun_geometry,
  scale: 30
});

Export.image.toDrive({
  image: classified_smileNaiveBayes,
  description: "clasificacion_smileNaiveBayes",
  folder: "Clasificación de Uso de Suelo - Cancún",
  region: cancun_geometry,
  scale: 30
});

Export.image.toDrive({
  image: classified_smileRandomForest,
  description: "clasificacion_smileRandomForest",
  folder: "Clasificación de Uso de Suelo - Cancún",
  region: cancun_geometry,
  scale: 30
});

Export.image.toDrive({
  image: classified_libsvm,
  description: "clasificacion_libsvm",
  folder: "Clasificación de Uso de Suelo - Cancún",
  region: cancun_geometry,
  scale: 30
});